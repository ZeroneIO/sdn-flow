<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>io.zerone.webapp</groupId>
  <artifactId>sdnflow</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>SDN Flow Control</name>

  <properties>
    <!-- packaging name of .war -->
    <warName>sdnflow</warName>
    <webappDirectory>target/www</webappDirectory>
    <!-- zerone.io packages -->
    <zerone.version>1.0-SNAPSHOT</zerone.version>
    <!-- jdk version -->
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
    <!-- jersey.version>1.18.1</jersey.version -->
    <jersey.version>1.13</jersey.version>
    <!-- grizzly.version>2.3.16</grizzly.version -->
    <grizzly.version>2.2.18</grizzly.version>
    <log4j.version>1.2.17</log4j.version>
    <!-- slf4j.version>1.7.13</slf4j.version -->
    <slf4j.version>1.6.6</slf4j.version>
    <!-- embeded database (derby) version -->
    <derby.version>10.12.1.1</derby.version>
    <!-- Jetty -->
    <jetty.version>8.1.16.v20140903</jetty.version>
    <!-- Google Closure Javascript Compiler -->
    <closure.version>r2388</closure.version>
    <!-- Default Encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  
  <!--======================= Dependency Management ====================== -->

  <!--=========================== Dependencies =========================== -->
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.10</version>
      <scope>test</scope>
    </dependency>

    <!-- ============ Managed dependencies ============== -->
    <!-- View Components will be compiled to java-script -->

    <!-- ================ Service Beans ================= -->
    <!-- dependency>
      <groupId>io.zerone.bean</groupId>
      <artifactId>event-service</artifactId>
      <version>${zerone.version}</version>
    </dependency -->

    <!-- Jersey for JAX-RS -->
    <dependency>
      <groupId>io.zerone.bean</groupId>
      <artifactId>rest-jersey</artifactId>
      <version>${zerone.version}</version>
    </dependency>

    <!-- For javax.servlet.* -->
    <!--
    <dependency>
      <groupId>org.eclipse.jetty.orbit</groupId>
      <artifactId>javax.servlet</artifactId>
      <version>3.0.0.v201112011016</version>
      <scope>provided</scope>
    </dependency>
    -->

    <!-- Bridge all logs to slf4j -->
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.1.1</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.zerone.bean</groupId>
      <artifactId>log</artifactId>
      <version>${zerone.version}</version>
    </dependency>
   
    <!-- Database:embeded for test -->
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derby</artifactId>
      <version>${derby.version}</version>
    </dependency>
 
    <!-- Database for production -->
    <!--
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derbyclient</artifactId>
      <version>${derby.version}</version>
    </dependency>
    -->

    <!-- EntityManager -->
    <dependency>
      <groupId>io.zerone.bean</groupId>
      <artifactId>dao-jpa-eclipselink</artifactId>
      <version>${zerone.version}</version>
    </dependency>

    <!-- Transaction Manager -->
    <!--
    <dependency>
      <groupId>javax.transaction</groupId>
      <artifactId>jta</artifactId>
      <version>1.1</version>
    </dependency>
    -->
    
  </dependencies>

  <!--===================== Build: Default Configurations ================ -->
  <build>
    <!-- Generate compiled stuff in the folder used for developing mode -->
    <outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

    <pluginManagement>
      <plugins>
        <!-- Maven War Plugin for view.design, before executing jetty:run -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>2.5</version>
          <configuration>
            <webappDirectory>${webappDirectory}</webappDirectory>
            <webXml>${webappDirectory}/WEB-INF/web.xml</webXml>
          </configuration>
        </plugin>

        <!-- Copy static web files before executing jetty:run (design/mock-up only) -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>2.7</version>
          <executions>
            <execution>
              <phase>compile</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <outputDirectory>${webappDirectory}</outputDirectory>
                <resources>
                  <resource>
                    <directory>src/main/webapp</directory>
                  </resource>
                </resources>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- Jetty configurations (local test) -->
        <plugin>
          <groupId>org.mortbay.jetty</groupId>
          <artifactId>jetty-maven-plugin</artifactId>
          <version>${jetty.version}</version>
          <configuration>
            <webApp>
              <contextPath>/${project.artifactId}</contextPath>
            </webApp>
            <!-- jettyConfig>src/test/resources/jetty.xml</jettyConfig -->
            <webAppSourceDirectory>${webappDirectory}</webAppSourceDirectory>
            <webXml>${webappDirectory}/WEB-INF/web.xml</webXml>
            <systemProperties>
              <systemProperty>
                <name>log4j.configuration</name>
                <value>file:./target/www/WEB-INF/classes/log4j.xml</value>
              </systemProperty>
              <systemProperty>
                <name>jetty.logs</name>
                <value>.</value>
              </systemProperty>
            </systemProperties>
          </configuration>
        </plugin>

        <!-- Tomcat configurations (local test) -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>tomcat-maven-plugin</artifactId>
          <version>1.1</version>
          <configuration>
            <addContextWarDependencies>true</addContextWarDependencies>
          </configuration>
        </plugin>

      </plugins>
    </pluginManagement>

    <plugins>
      <!-- Add source folders to test classpath in order to run junit-tests -->
      <!-- 'maven-surefire-plugin' is REMOVED to parent pom -->

      <!-- Copy static web files before executing jetty:run -->
      <!-- 'maven-resources-plugin' is REMOVED to parent pom -->

      <!-- Eclipse configurations -->
      <!-- 'maven-eclipse-plugin' is REMOVED into parent pom -->

      <!-- Dependency Plugin -->

      <!-- Jetty configurations (for local test) -->
      <!-- 'jetty-maven-plugin' is REMOVED into parent pom -->
    </plugins>
  </build>

  <!--=========================== Profiles ================================ -->
  <profiles>
    <!-- Profile 'dist': pre-release distribution with install/package -->
    <profile>
      <id>dist</id>
      <activation>
        <property>
          <name>dist</name>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- Checking dependent GWT modules -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
          </plugin>
          
          <!-- Jetty precompile jsp files (for deployment) -->
          <plugin>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>jetty-jspc-maven-plugin</artifactId>
            <version>${jetty.version}</version>
            <executions>
              <execution>
                <id>jspc</id>
                <goals>
                  <goal>jspc</goal>
                </goals>
                <configuration>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Profile 'prod': final release/production with install/package -->
  </profiles>
</project>
